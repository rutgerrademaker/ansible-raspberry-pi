- name: Install Adminer
  hosts: pi5
  become: true
  vars:
    app_name: "adminer"
    app_dir: "/data/{{ app_name }}"
    app_user: "{{ ansible_user }}"
    app_group: "{{ ansible_group }}"

  tasks:
    - name: "Create directories  {{ app_name }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0755"
      loop:
        - "{{ app_dir }}"

    - name: "Install files for {{ app_name }}"
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0644"
      loop:
        - src: "compose.yml"
          dest: "{{ app_dir }}/compose.yml"

    - name: "Substitute secrets and variables for {{ app_name }}"
      ansible.builtin.replace:
        path: "{{ item.path }}"
        regexp: "{{ item.regexp }}"
        replace: '{{ item.replace }}'
      loop:
        - path: "{{ app_dir }}/compose.yml"
          regexp: '___APP_NAME___'
          replace: '{{ app_name }}'
        - path: "{{ app_dir }}/compose.yml"
          regexp: '___HOSTNAME___'
          replace: '{{ ansible_hostname }}'

    # - name: Tear down existing services
    #   community.docker.docker_compose:
    #     project_src: "{{ app_dir }}"
    #     state: absent
    #     files: compose.yml
    #     debug: true

    # - name: Create and start services
    #   community.docker.docker_compose:
    #     project_src: "{{ app_dir }}"
    #   register: output

    # - name: Show results
    #   ansible.builtin.debug:
    #     var: output

    # - name: Run `docker-compose up` again
    #   community.docker.docker_compose:
    #     project_src: "{{ app_dir }}"
    #     build: false
    #   register: output

    # - name: Show results
    #   ansible.builtin.debug:
    #     var: output

    # - name: Verify nothing changed
    #   ansible.builtin.assert:
    #     that: not output.changed
